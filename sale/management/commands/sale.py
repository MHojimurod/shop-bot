
from telegram.ext import (
    Updater,
    Filters,
    CallbackContext,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
)

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    Update,
    User,
)
from admin_panel.models import Text
from diller.management.commands.decorators import delete_tmp_message
from sale.management.commands.decorators import get_user

from sale.models import Card, CashOrder, SerialNumbers
from seller.models import  Seller

from .constant import (
    ACCOUNT,
    CASHBACK,
    CASHBACK_PHOTO,
    LANGUAGE,
    SELECT_NEW_LANGUAGE,
    HOLDER,
    TOKEN,
    NUMBER,
    NAME,
    REGION,
    MENU,
    CARD,
)


from sale.stages import MainHandlers

user: User = None
db_user: Seller = None

back = {
    "uz": "Ortga",
    "ru": "–ù–∞–∑–∞–¥"
}


class Bot(Updater, MainHandlers):
    def __init__(self, token: str = None):
        assert token, ValueError("Token is required")
        super().__init__(token)

        not_start = ~Filters.regex("^(/start)")

        self.conversation = ConversationHandler(
            entry_points=[
                CommandHandler("start", self.start),
            ],
            states={
                LANGUAGE: [
                    MessageHandler(Filters.regex("^(üá∫üáø|üá∑üá∫)") & not_start, self.language)
                ],
                NAME: [MessageHandler(Filters.text & not_start, self.name)],
                NUMBER: [
                    MessageHandler(Filters.contact & not_start, self.number),
                    MessageHandler(Filters.regex("^(\+998\d{9})$"), self.number),
                    MessageHandler(Filters.all & not_start, self.invalid_number),
                ],
                REGION: [
                    MessageHandler(Filters.text & not_start, self.region),
                ],
                ACCOUNT: [
                    MessageHandler(
                        Filters.regex("^(Kartaga chiqarish|–í—ã–ø—É—Å–∫ –Ω–∞ –∫–∞—Ä—Ç—É)"), self.transfer
                    ),
                    MessageHandler(Filters.regex("^(Ortga|–ù–∞–∑–∞–¥)"), self.start),
                ],
                CARD: [
                    MessageHandler(Filters.regex("^(\d{16})$"), self.card),
                    MessageHandler(Filters.regex("^(Ortga|–ù–∞–∑–∞–¥)"), self.my_account),
                    MessageHandler(Filters.text & not_start, self.invalid_card),
                ],
                HOLDER: [
                    MessageHandler(Filters.regex("^(Ortga|–ù–∞–∑–∞–¥)"), self.transfer),
                    MessageHandler(Filters.text & not_start, self.holder_name),
                ],
                CASHBACK_PHOTO: [
                    MessageHandler(Filters.photo & not_start, self.cashback_photo),
                ],
                MENU: [
                    MessageHandler(Filters.regex("^(Yordam|–ü–æ–º–æ—â—å)"), self.help),
                    MessageHandler(Filters.regex("^(Seriya ‚Ññ yuborish|–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä)"), self.cashback),
                    MessageHandler(Filters.regex("^(Mening hisobim|–ú–æ–π —Å—á–µ—Ç)"), self.my_account),
                    CommandHandler("language", self.change_language),
                ],
                CASHBACK: [
                    MessageHandler(Filters.regex("^(Ortga|–ù–∞–∑–∞–¥)"), self.start),
                    MessageHandler(Filters.text & not_start, self.check_cashback),
                ]
                
            },
            fallbacks=[
                CommandHandler("start", self.start),
                MessageHandler(Filters.all, self.start),
            ],
        )
        self.dispatcher.add_handler(self.conversation)
        self.start_polling()
        print("polling")
        self.idle()


    @delete_tmp_message
    def change_language(self, update: Update, context: CallbackContext):
        user, db_user = get_user(update)
        user.send_message(text=f"Salom {user.first_name}",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["üá∫üáø O'zbekcha", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"],
                ],
                resize_keyboard=True,
            ),
            parse_mode="HTML",
        )
        return LANGUAGE


    def invalid_number(self, update: Update, context: CallbackContext):
        user, db_user = get_user(update)
        text = {
            "uz": "Nomerni xato kiritdingiz iltimos tekshirib qayta kiriting",
            "ru": "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
        }
        update.message.reply_text(text=text[db_user.language])
        return NUMBER

    def help(self, update: Update, context: CallbackContext):
        user, db_user = get_user(update)
        text = {
            "uz": "Hurmatli sotuvchi sizda ushbu aksiya bo'yicha murojaatlaringiz bo'lsa quydagi manzilarga etishingiz mumkin:\n\n‚òéÔ∏è +998557020020\nIsh vaqti: Dush-Shanba 8:00-18:00",
            "ru": "–£–≤–∞–∂–∞–µ–º—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∞–∫—Ü–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∞–¥—Ä–µ—Å–∞–º:\n\n‚òéÔ∏è +998557020020\n–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–Ω-–°–± 8:00-18:00"
        }
        button = {
            "uz": "Telegram orqali",
            "ru": "–ß–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º"
        }
        inline_button = [
            [InlineKeyboardButton(button[db_user.language], url="https://t.me/Farrukhuz")]
        ]

        update.message.reply_html(
            text=text[db_user.language], reply_markup=InlineKeyboardMarkup(inline_button)
        )
        return MENU

    def cashback(self, update: Update, context: CallbackContext):
        user, db_user = get_user(update)
        button = [[KeyboardButton(back[db_user.language])]]
        text = {
            "uz": "Stikerda joylashgan 7 ta raqamli seriya raqamni kiriting",
            "ru": "–í–≤–µ–¥–∏—Ç–µ —Å–µ–º–∏–∑–Ω–∞—á–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ –Ω–∞–∫–ª–µ–π–∫–µ"
        }
        update.message.reply_html(
            text[db_user.language],
            reply_markup=ReplyKeyboardMarkup(button, resize_keyboard=True),
        )
        return CASHBACK

    def check_cashback(self, update: Update, context: CallbackContext):
        user, db_user = get_user(update)
        text = update.message.text
        try:
            code = SerialNumbers.objects.get(code=text)
            if code.is_used:
                text = {
                    "uz": "Ushbu seria raqam allaqachon foydalanilgan",
                    "ru": "–≠—Ç–æ—Ç —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
                }
                update.message.reply_html(text=text[db_user.language])
                return CASHBACK
            text = {
                "uz": "Stikerni himoya qatlamini o'chirib suratga oling va bizga yuboring",
                "ru": "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞–∫–ª–µ–π–∫—É —Å–æ —Å–Ω—è—Ç—ã–º –∑–∞—â–∏—Ç–Ω—ã–º —Å–ª–æ–µ–º –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–µ –Ω–∞–º."
            }
            update.message.reply_html(text=text[db_user.language])
            context.user_data["seria"] = code
            return CASHBACK_PHOTO

        except:
            text = {
                "uz": "Bunday seria  raqam topilamdi",
                "ru": "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
            update.message.reply_html(text=text[db_user.language])
            return CASHBACK

    def my_account(self, update: Update, coxtext: CallbackContext):
        user, db_user = get_user(update)
        text = f"ID raqamingiz: #{db_user.pk}\n\n"
        text += f"Umumiy cashback summasi: ${db_user.total_sum}\n\n"
        text += f"To'langan: ${db_user.payed_sum}\n\n"
        text += f"Kutilyotgan: ${db_user.waiting_sum}\n\n"
        text += f"To'lovga tasdiqlangan: ${db_user.account}" 
        button = []
        if db_user.account >= 5:
            button_text = {
                "uz": "Kartaga chiqarish",
                "ru": "–í—ã–ø—É—Å–∫ –Ω–∞ –∫–∞—Ä—Ç—É"
            }
            button.append([KeyboardButton(button_text[db_user.language])])
        button.append([KeyboardButton(back[db_user.language])])
        user.send_message(
            text=text, reply_markup=ReplyKeyboardMarkup(button, resize_keyboard=True)
        )
        return ACCOUNT

    def transfer(self, update: Update, context: CallbackContext):
        user, db_user = get_user(update)
        card = Card.objects.filter(seller=db_user).last()
        text = {
            "uz": "Bonus mablag'ini o'z hisobingizga  o'tkazish uchun HUMO yoki UZCARD kartangizning   16 talik hisob raqamini  yozing",
            "ru": "–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±–æ–Ω—É—Å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ 16-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã HUMO –∏–ª–∏ UZCARD"
        }
        button = []
        if card:
            button.append([KeyboardButton(card.card_number)])
            text["uz"]+= "\nYoki quyidagi karta raqamingizni tanlang"
            text["ru"]+= "\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–∞—Ä—Ç—ã –Ω–∏–∂–µ"

        button.append([KeyboardButton("Ortga")])
        update.message.reply_html(
            text=text[db_user.language], reply_markup=ReplyKeyboardMarkup(button, resize_keyboard=True)
        )
        return CARD

    def card(self, update: Update, context: CallbackContext):
        user, db_user = get_user(update)
        text = update.message.text
        context.user_data["card"] = text
        card = Card.objects.filter(seller=db_user, card_number=text).last()
        if card:
            self.holder_name(update, context)
            return MENU
        button = [[KeyboardButton(back[db_user.language])]]
        text = {
            "uz": "Karta egasi ism familyasini kiriting",
            "ru": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã"
        }
        update.message.reply_html(text=text[db_user.language],
            reply_markup=ReplyKeyboardMarkup(button, resize_keyboard=True),
        )
        return HOLDER

    def invalid_card(self, update: Update, context: CallbackContext):
        user, db_user = get_user(update)
        text = {
            "uz": "Karta raxamt 16 xonali sondan iborat bo'lishi shart\n\nMasalan: xxxx xxxx xxxx xxxx",
            "ru": "–ö–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: xxxx xxxx xxxx xxxx"
        }
        update.message.reply_html(text=text[db_user.language])
        return CARD

    def holder_name(self, update: Update, context: CallbackContext):
        user, db_user = get_user(update)
        msg = update.message.text
        card_number = context.user_data.get("card", None)
        card = Card.objects.filter(seller=db_user, card_number=card_number).last()
        if not card:
            card = Card.objects.create(
                card_number=card_number, holder_name=msg, seller=db_user
            )
        CashOrder.objects.create(seller=db_user, card=card, price=db_user.account)
        db_user.account= 0
        db_user.save()
        help_btn = {
                "uz": "Yordam",
                "ru": "–ü–æ–º–æ—â—å"
            }
        seria = {
                "uz": "Seriya ‚Ññ yuborish",
                "ru": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"
            }
        my_account = {
                "uz": "Mening hisobim",
                "ru": "–ú–æ–π —Å—á–µ—Ç"
            }
        button = [
            [KeyboardButton(seria[db_user.language])],
            [KeyboardButton(my_account[db_user.language]), KeyboardButton(help_btn[db_user.language])],
        ]
        text = {
            "uz": "Kartangiz tasdiqlanishi  bilan sizga o'tkazib beramiz",
            "ru": "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞, –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–µ –≤–∞–º"
        }
        update.message.reply_html(text=text[db_user.language],
            reply_markup=ReplyKeyboardMarkup(button, resize_keyboard=True),
        )
        return MENU


from django.core.management.base import BaseCommand


class Command(BaseCommand):
    def handle(self, *args, **kwargs):
        Bot(TOKEN)
